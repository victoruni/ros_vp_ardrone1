#!/usr/bin/env python
#-*-coding:utf-8 -*-
import roslib; roslib.load_manifest('vp_ardrone1')
import rospy
import subprocess
import shlex

from ardrone_autonomy.msg import *
from ardrone_autonomy.srv import *
from std_msgs.msg import String
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist

matrix = [["поехали","поех","ехал"],["посадка","садка","конец"],["замр","вис",""],["назад","насат"],["перед","перет"],["лев","лего"],["прав"],["верх","выше"],["низ","нис","ниж"],["поворот","орот", "ород"],["круж","круг"],["ыстр","истр"],["медл","лини","тише"]]

def talker():
    pub = rospy.Publisher('vp_ardrone_pub1', String)
    rospy.init_node('ardrone_voice_to_text')
    rospy.set_param("vp_ardrone_geometry",[0.,0.,0.,0.,0.,0.])
    pub1=rospy.Publisher('ardrone/takeoff', Empty)
    pub2=rospy.Publisher('ardrone/land', Empty)
    twist=Twist()
    pub3=rospy.Publisher('ardrone/cmd_vel', Twist)

    while not rospy.is_shutdown():
      pub.publish("wait voice") 
      proc1=subprocess.Popen('padsp julius -quiet -input mic -C /home/petin/julius-grammar/julian.jconf').communicate()      
      pub.publish("voice - ok") 
      result10=proc1.communicate()[0]
      result11=proc1.communicate()[1]
      str = "result 1 = %s  2= %s"%result10,result11
      pub.publish(str)
       
if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException: pass

